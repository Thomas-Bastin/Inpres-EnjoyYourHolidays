/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import ProtocolROMP.*;
import Entities.*;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Arkios
 */
public class MainApp extends javax.swing.JFrame {
    private final InetSocketAddress Addr;
    private LinkedList<Complexes> CompList;
    
    /**
     * Creates new form MainApp
     */
    public MainApp(Socket s, InetSocketAddress ad) {               
        initComponents();
        ComplexeList.setFocusable(false);
        
        CompList = null;
        
        Addr = ad;
        
        RefreshComplexe();
    }
    
    private LinkedList<Complexes> getComplexeList() throws IOException, ClassNotFoundException{
        Socket sock = new Socket();
        sock.connect(Addr);
        ObjectOutputStream oos = new ObjectOutputStream(sock.getOutputStream());
        
            
        
        LinkedList<Complexes> list = new LinkedList<Complexes>();
        
        oos.writeObject(new ListComplexRequest());
        
        ObjectInputStream ios = new ObjectInputStream(sock.getInputStream());    
        Object r = ios.readObject();
        
        if (r instanceof TimeOut) {
            JOptionPane.showMessageDialog(this, "Le serveur est éteint pour maintenance.", "Disconnect", JOptionPane.INFORMATION_MESSAGE);
            return list;
        }
        
        if (r instanceof ListComplexResponse) {
            ListComplexResponse req = (ListComplexResponse) r;

            switch (req.getCode()) {
                case ListComplexResponse.SUCCESS:
                    ComplexeList.setFocusable(true);
                    return req.getList();

                case ListComplexResponse.BADDB:
                    JOptionPane.showMessageDialog(this, "Erreur BDD: " + req.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    break;

                case ListComplexResponse.UNKOWN:
                default:
                    JOptionPane.showMessageDialog(this, "Erreur: " + req.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    break;
            }
        }
        sock.close();
        return list;
    }
    
    
    private void RefreshComplexe(){
        try {
            CompList = getComplexeList();
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Erreur " + ex.getMessage(), "Disconnect", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(CompList != null){
            DefaultTableModel model = (DefaultTableModel) ComplexeList.getModel();
            model.setRowCount(0);
            for(Complexes c : CompList){
                model.addRow(c.toVector());
            }
            ComplexeList.setModel(model);
        }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ComplexeList = new javax.swing.JTable();
        Mybar = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        Logout = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reservation Rooms App");

        ComplexeList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Waiting...", null}
            },
            new String [] {
                "Nom", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ComplexeList.setRowHeight(20);
        ComplexeList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ComplexeListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ComplexeList);

        File.setText("File");

        Logout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        Logout.setText("Se Déconnecter");
        Logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutActionPerformed(evt);
            }
        });
        File.add(Logout);

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        Exit.setText("Quitter");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        File.add(Exit);

        Mybar.add(File);

        setJMenuBar(Mybar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 891, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutActionPerformed

        
        try {
            //Closed Sock
            login window = new login();
            window.setVisible(true);
            this.dispose();
        } catch (IOException ex) {
            Logger.getLogger(MainApp.class.getName()).log(Level.SEVERE, null, ex);
            System.exit(128);
        }
        
    }//GEN-LAST:event_LogoutActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void ComplexeListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ComplexeListMouseClicked
       
        if (evt.getClickCount() == 2) {
            Complexes comp = CompList.get(ComplexeList.getSelectedRow());
            
            System.out.println("Selectionné: " + comp);
            ComplexeView window = null;
            try {
                window = new ComplexeView(this, true, comp, Addr);
            } catch (IOException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "La connexion avec le serveur a été interrompue", "Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(MainApp.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            window.setVisible(true);
        }
    }//GEN-LAST:event_ComplexeListMouseClicked
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ComplexeList;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu File;
    private javax.swing.JMenuItem Logout;
    private javax.swing.JMenuBar Mybar;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
