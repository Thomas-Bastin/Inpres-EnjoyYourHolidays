/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import ProtocolROMP.*;
import Entities.*;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.RoundingMode;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Arkios
 */
public class BookRoom extends javax.swing.JDialog {
    private InetSocketAddress Addr;
    
    private final Chambres selectedRoom;
    private final LinkedList<Voyageurs> userList;
    private final LinkedList<Chambres> roomList;
    private final LocalDate selectedDate;
        
    /**
     * Creates new form BookRoom
     */
    public BookRoom(java.awt.Frame parent, boolean modal, InetSocketAddress ad,  Chambres ch, LocalDate dReserv, LinkedList<Voyageurs> uli, LinkedList<Chambres> chli) {
        super(parent, modal);
        initComponents();
        Addr = ad;
        
        selectedRoom = ch;
        userList = uli;
        roomList = chli;
        selectedDate = dReserv;
        
        ComboDate.setDate(Date.from(dReserv.atStartOfDay(ZoneId.systemDefault()).toInstant()));
        ComboDate.setMinSelectableDate(new Date());
        
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        for(Chambres room : roomList){
            model.addElement(room);
        }
        model.setSelectedItem(selectedRoom);
        ComboRooms.setModel(model);
        
        
        model = new DefaultComboBoxModel();
        for(Voyageurs user : userList){
            model.addElement(user);
        }
        ComboUser.setModel(model);
    }


    



    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        ComboDate = new com.toedter.calendar.JDateChooser();
        ComboUser = new javax.swing.JComboBox<>();
        ComboRooms = new javax.swing.JComboBox<>();
        OK = new javax.swing.JButton();
        KO = new javax.swing.JButton();
        DaySpinner = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Date:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Voyageurs Référent: ");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Nombre de Jours:");

        ComboUser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        ComboRooms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        OK.setText("Enregistrer");
        OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKActionPerformed(evt);
            }
        });

        KO.setText("Annuler");
        KO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KOActionPerformed(evt);
            }
        });

        DaySpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 1000, 1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("Chambre:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(jLabel5)
                        .addGap(20, 20, 20)
                        .addComponent(ComboDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ComboUser, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(82, 82, 82)
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(ComboRooms, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(DaySpinner)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(KO, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95)
                .addComponent(OK, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(98, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboRooms, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(ComboUser, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ComboDate, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(DaySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OK, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(KO, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void KOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KOActionPerformed
        this.dispose();
    }//GEN-LAST:event_KOActionPerformed

    private void OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKActionPerformed

        final Chambres selectRoom = (Chambres) ComboRooms.getSelectedItem();
        final Voyageurs selectUser = (Voyageurs) ComboUser.getSelectedItem();
        final java.sql.Date selectDate = java.sql.Date.valueOf(LocalDate.from(ComboDate.getDate().toInstant().atZone(ZoneId.systemDefault())));
        final int selectNbNights = (int) DaySpinner.getValue();
        
        final DecimalFormat df = new DecimalFormat("#.##");
        df.setRoundingMode(RoundingMode.UP);
        
        final int ret = JOptionPane.showConfirmDialog(this,
                "êtes vous sur de réserver la chambre du "+selectDate+" pendant "+selectNbNights+
                " jour\nau nom de "+selectUser.getNomVoyageur()+"                                    Prix: "+selectNbNights+"x" 
                + df.format(selectRoom.getPrixHTVA()*1.21) + "=" + df.format(selectNbNights*selectRoom.getPrixHTVA()*1.21) + "€", 
                
                "Confirmation Reservation", JOptionPane.OK_CANCEL_OPTION);
        if(ret !=0) return;
        
        Socket sock = new Socket();
        
        try {
            sock.connect(Addr);
            ObjectOutputStream oos = new ObjectOutputStream(sock.getOutputStream());
            oos.writeObject(new BookRoomRequest(selectRoom, selectDate, selectNbNights, selectUser));  
        } 
        catch(IOException ex) {Logger.getLogger(BookRoom.class.getName()).log(Level.SEVERE, null, ex);return;}
        
        Object r = null;
        
        
        
        try {
            ObjectInputStream ios = new ObjectInputStream(sock.getInputStream());
            r = ios.readObject();  
        } 
        catch(IOException | ClassNotFoundException ex) {Logger.getLogger(BookRoom.class.getName()).log(Level.SEVERE, null, ex);return;}
        
        if (r instanceof TimeOut) {
            JOptionPane.showMessageDialog(this, "Le serveur est éteint pour maintenance.", "Disconnect", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (r instanceof BookRoomResponse) {
            BookRoomResponse req = (BookRoomResponse) r;
            
            switch (req.getCode()) {
                case BookRoomResponse.SUCCESS:
                    JOptionPane.showMessageDialog(this, "Reservation Réussie", "Success", JOptionPane.INFORMATION_MESSAGE);
                    break;
                    
                case BookRoomResponse.INVALIDDATE:
                    JOptionPane.showMessageDialog(this, "Erreur: "+ req.getMessage(), "Error", JOptionPane.WARNING_MESSAGE);
                    return;
                    
                case BookRoomResponse.BADDB:
                    JOptionPane.showMessageDialog(this, "Erreur BDD: " + req.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    return;

                case BookRoomResponse.UNKOWN:
                default:
                    JOptionPane.showMessageDialog(this, "Erreur: " + req.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    return;
            }
        }
        this.dispose();
    }//GEN-LAST:event_OKActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser ComboDate;
    private javax.swing.JComboBox<String> ComboRooms;
    private javax.swing.JComboBox<String> ComboUser;
    private javax.swing.JSpinner DaySpinner;
    private javax.swing.JButton KO;
    private javax.swing.JButton OK;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables

}
