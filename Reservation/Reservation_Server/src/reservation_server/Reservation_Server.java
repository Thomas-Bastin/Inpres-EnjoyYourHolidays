/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package reservation_server;

import DataBase.db;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import networklib.Server.*;

/**
 *
 * @author Arkios
 */
public class Reservation_Server extends javax.swing.JFrame implements ServerConsole{
    
    private ServerTCP serveur;
    private Properties config;
    
    /**
     * Creates new form Serveur_Activities
     */
    public Reservation_Server() {
        initComponents();
        loadProperties();
        db.initdatabase();
        
        Port.setText(config.getProperty("server_port"));
    }
    
    private synchronized void loadProperties(){
        File f = new File("server.cfg");
        config = new Properties();
        
        try {
            if(f.createNewFile()){
                OutputStream os = new FileOutputStream(f.getPath());
                config.setProperty("server_port", "50006");
                config.setProperty("threadNumber", "10");
                config.setProperty("dbSocket", "192.168.1.63:3560");
                config.setProperty("dbName", "bd_holidays");
                config.setProperty("dbUserName", "db_access_tools");
                config.setProperty("dbPassword", "p11eYu");
                
                config.store(os, "Configuration du Serveur:");
            }
            else{
                FileInputStream fis = new FileInputStream(f.getPath());
                config.load(fis);
            }
        } catch (IOException ex) {
            Logger.getLogger(Reservation_Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Port = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TraceTable = new javax.swing.JTable();
        Launch_StopButton = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Serveur Reservation");
        setMinimumSize(new java.awt.Dimension(400, 440));

        Port.setText("50005");
        Port.setToolTipText("");
        Port.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jScrollPane1.setAutoscrolls(true);

        TraceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TimeStamp", "Origine", "Requète", "Thread"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TraceTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        TraceTable.setDoubleBuffered(true);
        TraceTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(TraceTable);
        if (TraceTable.getColumnModel().getColumnCount() > 0) {
            TraceTable.getColumnModel().getColumn(0).setMinWidth(100);
            TraceTable.getColumnModel().getColumn(0).setPreferredWidth(100);
            TraceTable.getColumnModel().getColumn(1).setMinWidth(100);
            TraceTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            TraceTable.getColumnModel().getColumn(2).setMinWidth(350);
            TraceTable.getColumnModel().getColumn(2).setPreferredWidth(250);
            TraceTable.getColumnModel().getColumn(3).setMinWidth(250);
            TraceTable.getColumnModel().getColumn(3).setPreferredWidth(250);
        }

        Launch_StopButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Launch_StopButton.setText("Launch");
        Launch_StopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Launch_StopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(Port, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                .addGap(67, 67, 67)
                .addComponent(Launch_StopButton, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                .addGap(35, 35, 35))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Port, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Launch_StopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Launch_StopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Launch_StopButtonActionPerformed
        if(Launch_StopButton.getModel().isSelected()){
            Launch_StopButton.setText("Launching...");            
            DefaultTableModel dtm = (DefaultTableModel) TraceTable.getModel();
            dtm.setRowCount(0);
            //Start le serveur
            StartServer();
            
            Launch_StopButton.setText("Running");
        }
        else{
            Launch_StopButton.setText("Quitting...");

            //Coupe le Serveur
            StopServer();
            Launch_StopButton.setText("Launch");
        }        
    }//GEN-LAST:event_Launch_StopButtonActionPerformed
    
       
    private void StartServer(){
        try {
            Trace("serveur#initialisation#main");
            int port = Integer.parseInt( Port.getText() );
            Trace("serveur#acquisition du port#main");
            int threadCount = Integer.parseInt(config.getProperty("threadNumber", "3"));
            
            serveur = new ServerTCP(port, new ListTask(), this, threadCount);
            serveur.setName("Serveur-TCP ListenSocket");
            serveur.start();
            
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Message:\n"+ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        } catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(this, "Message:\n"+"Vous devez mettre un n° de port valide", "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void StopServer(){
        try {
            if(serveur != null){
                serveur.Shutdown();
                serveur.stop();
                serveur = null;
            } 
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Erreur", "Message:\n"+ex.getMessage(), JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reservation_Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reservation_Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reservation_Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reservation_Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reservation_Server().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton Launch_StopButton;
    private javax.swing.JFormattedTextField Port;
    private javax.swing.JTable TraceTable;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void Trace(String comment) {
        Vector ligne = new Vector();
        
        ligne.add(Timestamp.from(Instant.now()));
        
        //Découpage de la String:
        StringTokenizer parser = new StringTokenizer(comment,"#");
        while (parser.hasMoreTokens()){  
            ligne.add(parser.nextToken());
        }
        
        //Ajout au model le nouveau Vector()
        DefaultTableModel dtm = (DefaultTableModel) TraceTable.getModel();
        
        dtm.insertRow(0, ligne); 
    }
    
    
    @Override
    public void dispose(){
        this.StopServer();
        
        super.dispose();
    }
}

